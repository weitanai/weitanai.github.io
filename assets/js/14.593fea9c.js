(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{214:function(t,s,a){"use strict";a.r(s);var n=a(0),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位运算"}},[t._v("#")]),t._v(" 位运算")]),t._v(" "),a("h3",{attrs:{id:"_1-基本原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本原理"}},[t._v("#")]),t._v(" 1 基本原理")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 位与运算技巧")])]),t._v(" "),a("li",[a("p",[t._v("2 不用额外变量交换两个整数")])])]),t._v(" "),a("h3",{attrs:{id:"_2例题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2例题"}},[t._v("#")]),t._v(" 2例题")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1 只出现一次的数字")])]),t._v(" "),a("li",[a("p",[t._v("2 找出数组中缺失的那个数")])]),t._v(" "),a("li",[a("p",[t._v("3 位1的个数")])]),t._v(" "),a("li",[a("p",[t._v("4 数字范围按位与")])]),t._v(" "),a("li",[a("p",[t._v("5 比特位计数")])]),t._v(" "),a("li",[a("p",[t._v("6 两整数之和")])])]),t._v(" "),a("div",{staticClass:"language-plain extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("位操作（Bit Manipulation）是程序设计中对位模式或二进制数的一元和二元操作。\n在许多古老的微处理器上，位运算比加减运算略快，通常位运算比乘除法运算要快很多。\n在现代架构中，情况并非如此：位运算的运算速度通常与加法运算相同（仍然快于乘法运算）。\n\n位操作包括：\n¬¬ 取反（NOT）\n∩∩ 按位或（OR）\n⊕⊕ 按位异或（XOR）\n∪∪ 按位与（AND）\n\n\n移位\n移位是一个二元运算符，用来将一个二进制数中的每一位全部都向一个方向移动指定位，溢出的部分将被舍弃，\n而空缺的部分填入一定的值。\n移位又分为:\n算术移位\n逻辑移位\n")])])]),a("h3",{attrs:{id:"_1-基本原理-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本原理-2"}},[t._v("#")]),t._v(" 1 基本原理")]),t._v(" "),a("ul",[a("li",[t._v("0s 表示一串 0，1s 表示一串 1。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("x ^ 0s = x      x & 0s = 0      x | 0s = x\nx ^ 1s = ~x     x & 1s = x      x | 1s = 1s\nx ^ x = 0       x & x = x       x | x = x\n")])])]),a("ul",[a("li",[a("p",[t._v("利用 x ^ 1s = ~x 的特点，可以将位级表示翻转；")])]),t._v(" "),a("li",[a("p",[t._v("利用 x ^ x = 0 的特点，可以将三个数中重复的两个数去除，只留下另一个数。")])]),t._v(" "),a("li",[a("p",[t._v("利用 x & 0s = 0 和 x & 1s = x 的特点，可以实现掩码操作。")])]),t._v(" "),a("li",[a("p",[t._v("一个数 num 与 mask：00111100 进行位与操作，只保留 num 中与 mask 的 1 部分相对应的位。")])]),t._v(" "),a("li",[a("p",[t._v("利用 x | 0s = x 和 x | 1s = 1s 的特点，可以实现设值操作。")])]),t._v(" "),a("li",[a("p",[t._v("一个数 num 与 mask：00111100 进行位或操作，将 num 中与 mask 的 1 部分相对应的位都设置为 1。")])])]),t._v(" "),a("h4",{attrs:{id:"_1-位与运算技巧："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-位与运算技巧："}},[t._v("#")]),t._v(" 1 位与运算技巧：")]),t._v(" "),a("ul",[a("li",[t._v("n&(n-1) 去除 n 的位级表示中最低的那一位。例如对于二进制表示 10110100，减去 1 得到 10110011，这两个数相与得到 10110000。")]),t._v(" "),a("li",[t._v("n&(-n) 得到 n 的位级表示中最低的那一位。-n 得到 n 的反码加 1，对于二进制表示 10110100，-n 得到 01001100，相与得到 00000100。")]),t._v(" "),a("li",[t._v("n-n&(~n+1) 去除 n 的位级表示中最高的那一位。")])]),t._v(" "),a("h4",{attrs:{id:"_2-不用额外变量交换两个整数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-不用额外变量交换两个整数"}},[t._v("#")]),t._v(" 2 不用额外变量交换两个整数")]),t._v(" "),a("p",[t._v("a = a ^ b;")]),t._v(" "),a("p",[t._v("b = a ^ b;")]),t._v(" "),a("p",[t._v("a = a ^ b;")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2"}},[t._v("#")]),t._v(" 2")]),t._v(" "),a("h4",{attrs:{id:"_1-只出现一次的数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-只出现一次的数字"}},[t._v("#")]),t._v(" 1"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/single-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 只出现一次的数字"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("给定一个"),a("strong",[t._v("非空")]),t._v("整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。")]),t._v(" "),a("p",[a("strong",[t._v("说明：")])]),t._v(" "),a("p",[t._v("你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？")]),t._v(" "),a("p",[a("strong",[t._v("示例 1:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" [2,2,1]")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" 1")]),t._v(" "),a("p",[a("strong",[t._v("示例 2:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" [4,1,2,1,2]")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" 4")]),t._v(" "),a("p",[t._v("利用 x ^ x = 0 的特点，可以将数组中重复的两个数去除，只留下出现一次的数")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("利用 x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" 的特点，可以将数组中重复的两个数去除，只留下出现一次的数\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("singleNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            ans "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v("nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ans"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-找出数组中缺失的那个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-找出数组中缺失的那个数"}},[t._v("#")]),t._v(" 2 找出数组中缺失的那个数")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode.com/problems/missing-number/description/",target:"_blank",rel:"noopener noreferrer"}},[t._v("268. Missing Number (Easy)"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Input: [3,0,1]")]),t._v(" "),a("p",[t._v("Output: 2")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("public int missingNumber(int[] nums) {\n    int ret = 0;\n    for (int i = 0; i < nums.length; i++) {\n        ret = ret ^ i ^ nums[i];\n    }\n    return ret ^ nums.length;\n}\n")])])]),a("h4",{attrs:{id:"_3-位1的个数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-位1的个数"}},[t._v("#")]),t._v(" 3 "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-1-bits/",target:"_blank",rel:"noopener noreferrer"}},[t._v("位1的个数"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为"),a("a",{attrs:{href:"https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F",target:"_blank",rel:"noopener noreferrer"}},[t._v("汉明重量"),a("OutboundLink")],1),t._v("）。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1：")])]),t._v(" "),a("p",[t._v("**输入：**00000000000000000000000000001011")]),t._v(" "),a("p",[t._v("**输出：**3")]),t._v(" "),a("p",[t._v("**解释：**输入的二进制串 "),a("code",[t._v("**00000000000000000000000000001011** 中，共有三位为 '1'。")])]),t._v(" "),a("ul",[a("li",[t._v("idea: n$(n-1) 消去低位的1， n为零为止。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hammingWeight")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        sum"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("h4",{attrs:{id:"_4-数字范围按位与"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-数字范围按位与"}},[t._v("#")]),t._v(" 4 "),a("a",{attrs:{href:"https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/",target:"_blank",rel:"noopener noreferrer"}},[t._v("数字范围按位与"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("给定范围 [m, n]，其中 0 <= m <= n <= 2147483647，返回此范围内所有数字的按位与（包含 m, n 两端点）。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" [5,7]")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" 4")]),t._v(" "),a("p",[a("strong",[t._v("示例 2:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" [0,1]")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" 0")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rangeBitwiseAnd")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n            n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_5-比特位计数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-比特位计数"}},[t._v("#")]),t._v(" 5"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/counting-bits/",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 比特位计数"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("给定一个非负整数 "),a("strong",[t._v("num")]),t._v("。对于 "),a("strong",[t._v("0 ≤ i ≤ num")]),t._v(" 范围中的每个数字 "),a("strong",[t._v("i")]),t._v(" ，计算其二进制数中的 1 的数目并将它们作为数组返回。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" 2")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" [0,1,1]")]),t._v(" "),a("p",[a("strong",[t._v("示例 2:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" 5")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" "),a("code",[t._v("[0,1,1,2,1,2]")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("countBits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            count"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_6-两整数之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-两整数之和"}},[t._v("#")]),t._v(" 6"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/sum-of-two-integers/",target:"_blank",rel:"noopener noreferrer"}},[t._v(" 两整数之和"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("strong",[t._v("不使用")]),t._v("运算符 "),a("code",[t._v("+")]),t._v(" 和 "),a("code",[t._v("-")]),t._v(" ，计算两整数 "),a("code",[t._v("a")]),t._v(" 、"),a("code",[t._v("b")]),t._v(" 之和。")]),t._v(" "),a("p",[a("strong",[t._v("示例 1:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" a = 1, b = 2")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" 3")]),t._v(" "),a("p",[a("strong",[t._v("示例 2:")])]),t._v(" "),a("p",[a("strong",[t._v("输入:")]),t._v(" a = -2, b = 3")]),t._v(" "),a("p",[a("strong",[t._v("输出:")]),t._v(" 1")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("a + b 的问题拆分为 (a 和 b 的无进位结果) + (a 和 b 的进位结果)\n无进位加法使用异或运算计算得出\n进位结果使用与运算和移位运算计算得出\n循环此过程，直到进位为 0\n")])])]),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Solution")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进位")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" jw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相加位")]),t._v("\n    a  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("jw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//左移进位作为新的b")]),t._v("\n        b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//进位")]),t._v("\n        jw "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//相加位")]),t._v("\n        a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);