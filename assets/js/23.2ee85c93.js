(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{223:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),a("h3",{attrs:{id:"_1-优化链表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-优化链表"}},[t._v("#")]),t._v(" 1 优化链表")]),t._v(" "),a("h4",{attrs:{id:"_1-fundamental-problem-slow-search-even-though-it’s-in-order"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-fundamental-problem-slow-search-even-though-it’s-in-order"}},[t._v("#")]),t._v(" 1 Fundamental Problem: Slow search, even though it’s in order.")]),t._v(" "),a("ul",[a("li",[t._v("How do we do even better?")]),t._v(" "),a("li",[t._v("Dream big!")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/388749/1571290072188-6489287d-e4c2-4329-8dd6-17f6e312b6bb.png",alt:"Ftree.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/388749/1571290085044-4062757d-734f-4a47-a2bb-878ee1311c67.png",alt:"tree1.png"}})]),t._v(" "),a("h3",{attrs:{id:"_2-bst"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-bst"}},[t._v("#")]),t._v(" 2 BST")]),t._v(" "),a("h4",{attrs:{id:"_1-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-search"}},[t._v("#")]),t._v(" 1 search")]),t._v(" "),a("ul",[a("li",[t._v("与二分搜索思想相同")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BST")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BST "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Key")]),t._v(" sk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("keyequals")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("label")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sk ≺ "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("label")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_2-insert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-insert"}},[t._v("#")]),t._v(" 2 insert")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BST")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BST "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Key")]),t._v(" ik"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ik"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ik ≺ "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("label")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ik"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ik ≻ "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("label")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" ik"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"_3-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-delete"}},[t._v("#")]),t._v(" 3 delete :")]),t._v(" "),a("h5",{attrs:{id:"_3-cases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-cases"}},[t._v("#")]),t._v(" 3 Cases")]),t._v(" "),a("ul",[a("li",[t._v("Deletion key has no children.")]),t._v(" "),a("li",[t._v("Deletion key has one child.")]),t._v(" "),a("li",[t._v("Deletion key has two children.")])]),t._v(" "),a("h5",{attrs:{id:"_1-no-children"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-no-children"}},[t._v("#")]),t._v(" 1 No children")]),t._v(" "),a("p",[t._v("If the node has no children, it is a leaf, and we can just delete its parent pointer and the node will eventually be swept away by the "),a("a",{attrs:{href:"https://stackoverflow.com/questions/3798424/what-is-the-garbage-collector-in-java",target:"_blank",rel:"noopener noreferrer"}},[t._v("garbage collector"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h5",{attrs:{id:"_2-one-child"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-one-child"}},[t._v("#")]),t._v(" 2 One child")]),t._v(" "),a("p",[t._v("If the node only has one child, we know that the child maintains the BST property with the parent of the node because the property is recursive to the right and left subtrees. Therefore, we can just reassign the parent's child pointer to the node's child and the node will eventually be garbage collected.")]),t._v(" "),a("h5",{attrs:{id:"_3-two-children"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-two-children"}},[t._v("#")]),t._v(" 3 Two children")]),t._v(" "),a("p",[t._v("If the node has two children, the process becomes a little more complicated because we can't just assign one of the children to be the new root. This might break the BST property.")]),t._v(" "),a("p",[t._v("Instead, we choose a new node to replace the deleted one.")]),t._v(" "),a("p",[t._v("We know that the new node must:")]),t._v(" "),a("ul",[a("li",[t._v("be > than everything in left subtree.")]),t._v(" "),a("li",[t._v("be < than everything right subtree.")])]),t._v(" "),a("p",[t._v("In the below tree, we show which nodes would satisfy these requirements given that we are trying to delete the "),a("code",[t._v("dog")]),t._v(" node.")]),t._v(" "),a("p",[t._v("To find these nodes, you can just take the right-most node in the left subtree or the left-most node in the right subtree.")]),t._v(" "),a("p",[t._v("Then, we replace the "),a("code",[t._v("dog")]),t._v(" node with either "),a("code",[t._v("cat")]),t._v(" or "),a("code",[t._v("elf")]),t._v(" and then remove the old "),a("code",[t._v("cat")]),t._v(" or "),a("code",[t._v("elf")]),t._v(" node.")]),t._v(" "),a("p",[t._v("This is called "),a("strong",[t._v("Hibbard deletion")]),t._v(", and it gloriously maintains the BST property amidst a deletion.")]),t._v(" "),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),a("hr"),t._v(" "),a("h4",{attrs:{id:"_4-performance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-performance"}},[t._v("#")]),t._v(" 4 performance")]),t._v(" "),a("ul",[a("li",[t._v("Height varies dramatically between “bushy” and “spindly” trees.")]),t._v(" "),a("li",[t._v("取决于树的 密度？ 疏（bad）   ： 密(good);")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/388749/1571301380482-2f047ff9-28d1-4c18-8162-c3669c37cdc4.png",alt:"treeh.png"}})]),t._v(" "),a("h3",{attrs:{id:"_3-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-summary"}},[t._v("#")]),t._v(" 3 summary")]),t._v(" "),a("h4",{attrs:{id:"_1-binary-search-trees-efficient-data-structures-for-supporting-insertion-and-search"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-binary-search-trees-efficient-data-structures-for-supporting-insertion-and-search"}},[t._v("#")]),t._v(" 1 Binary search trees: Efficient data structures for supporting insertion and search.")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Operations on “Bushy” BSTs are logarithmic time.")])]),t._v(" "),a("li",[a("p",[t._v("Insertion of random data yields a bushy BST.")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("On random data, order of growth for get/put operations is logarithmic.")])])])]),t._v(" "),a("h4",{attrs:{id:"_2-performance-issues"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-performance-issues"}},[t._v("#")]),t._v(" 2 Performance issues:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("“Spindly” trees have linear performance.")])]),t._v(" "),a("li",[a("p",[t._v("Hibbard deletion results in order of growth that is sqrt(N).")])]),t._v(" "),a("li",[a("ul",[a("li",[t._v("Nobody knows how to do better on simple BSTs. Can improve to log(N) by having Hibbard Deletion that randomly picks successor vs. predecessor.")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);