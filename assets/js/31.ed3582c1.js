(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{231:function(a,t,r){"use strict";r.r(t);var e=r(0),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),r("h1",{attrs:{id:"一、解决的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、解决的问题"}},[a._v("#")]),a._v(" 一、解决的问题")]),a._v(" "),r("p",[a._v("由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。")]),a._v(" "),r("p",[a._v("Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/388749/1571538304050-babc35d2-16c4-473a-8fff-e35fdacebe5f.png",alt:"img"}})]),a._v(" "),r("h1",{attrs:{id:"二、与虚拟机的比较"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二、与虚拟机的比较"}},[a._v("#")]),a._v(" 二、与虚拟机的比较")]),a._v(" "),r("p",[a._v("虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/388749/1571538304104-7c3dcab7-86df-4138-985d-d8237b181660.png",alt:"img"}})]),a._v(" "),r("h2",{attrs:{id:"启动速度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#启动速度"}},[a._v("#")]),a._v(" 启动速度")]),a._v(" "),r("p",[a._v("启动虚拟机需要先启动虚拟机的操作系统，再启动应用，这个过程非常慢；")]),a._v(" "),r("p",[a._v("而启动 Docker 相当于启动宿主操作系统上的一个进程。")]),a._v(" "),r("h2",{attrs:{id:"占用资源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#占用资源"}},[a._v("#")]),a._v(" 占用资源")]),a._v(" "),r("p",[a._v("虚拟机是一个完整的操作系统，需要占用大量的磁盘、内存和 CPU 资源，一台机器只能开启几十个的虚拟机。")]),a._v(" "),r("p",[a._v("而 Docker 只是一个进程，只需要将应用以及相关的组件打包，在运行时占用很少的资源，一台机器可以开启成千上万个 Docker。")]),a._v(" "),r("h1",{attrs:{id:"三、优势"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#三、优势"}},[a._v("#")]),a._v(" 三、优势")]),a._v(" "),r("p",[a._v("除了启动速度快以及占用资源少之外，Docker 具有以下优势：")]),a._v(" "),r("h2",{attrs:{id:"更容易迁移"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更容易迁移"}},[a._v("#")]),a._v(" 更容易迁移")]),a._v(" "),r("p",[a._v("提供一致性的运行环境。已经打包好的应用可以在不同的机器上进行迁移，而不用担心环境变化导致无法运行。")]),a._v(" "),r("h2",{attrs:{id:"更容易维护"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更容易维护"}},[a._v("#")]),a._v(" 更容易维护")]),a._v(" "),r("p",[a._v("使用分层技术和镜像，使得应用可以更容易复用重复的部分。复用程度越高，维护工作也越容易。")]),a._v(" "),r("h2",{attrs:{id:"更容易扩展"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更容易扩展"}},[a._v("#")]),a._v(" 更容易扩展")]),a._v(" "),r("p",[a._v("可以使用基础镜像进一步扩展得到新的镜像，并且官方和开源社区提供了大量的镜像，通过扩展这些镜像可以非常容易得到我们想要的镜像。")]),a._v(" "),r("h1",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])]),a._v(" "),r("h1",{attrs:{id:"-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[a._v("#")])]),a._v(" "),r("h1",{attrs:{id:"四、使用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#四、使用场景"}},[a._v("#")]),a._v(" 四、使用场景")]),a._v(" "),r("h2",{attrs:{id:"持续集成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#持续集成"}},[a._v("#")]),a._v(" 持续集成")]),a._v(" "),r("p",[a._v("持续集成指的是频繁地将代码集成到主干上，这样能够更快地发现错误。")]),a._v(" "),r("p",[a._v("Docker 具有轻量级以及隔离性的特点，在将代码集成到一个 Docker 中不会对其它 Docker 产生影响。")]),a._v(" "),r("h2",{attrs:{id:"提供可伸缩的云服务"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提供可伸缩的云服务"}},[a._v("#")]),a._v(" 提供可伸缩的云服务")]),a._v(" "),r("p",[a._v("根据应用的负载情况，可以很容易地增加或者减少 Docker。")]),a._v(" "),r("h2",{attrs:{id:"搭建微服务架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#搭建微服务架构"}},[a._v("#")]),a._v(" 搭建微服务架构")]),a._v(" "),r("p",[a._v("Docker 轻量级的特点使得它很适合用于部署、维护、组合微服务。")]),a._v(" "),r("h3",{attrs:{id:"-3"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-3"}},[a._v("#")])]),a._v(" "),r("h1",{attrs:{id:"五、docker详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#五、docker详解"}},[a._v("#")]),a._v(" 五、Docker详解")]),a._v(" "),r("h3",{attrs:{id:"_1-什么是docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是docker"}},[a._v("#")]),a._v(" 1 什么是Docker ?")]),a._v(" "),r("ul",[r("li",[a._v("**Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口。**它是目前最流行的 Linux 容器解决方案。")]),a._v(" "),r("li",[a._v("Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。有了 Docker，就不用担心环境问题。")]),a._v(" "),r("li",[a._v("总体来说，Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")])]),a._v(" "),r("h3",{attrs:{id:"-4"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#-4"}},[a._v("#")])]),a._v(" "),r("h3",{attrs:{id:"_2-镜像与容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-镜像与容器"}},[a._v("#")]),a._v(" 2 镜像与容器")]),a._v(" "),r("p",[a._v("镜像是一种静态的结构，可以看成面向对象里面的类，而容器是镜像的一个实例。")]),a._v(" "),r("p",[a._v("镜像包含着容器运行时所需要的代码以及其它组件，它是一种分层结构，每一层都是只读的（read-only layers）。构建镜像时，会一层一层构建，前一层是后一层的基础。镜像的这种分层存储结构很适合镜像的复用以及定制。")]),a._v(" "),r("p",[a._v("构建容器时，通过在镜像的基础上添加一个可写层（writable layer），用来保存着容器运行过程中的修改。")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://cdn.nlark.com/yuque/0/2019/png/388749/1571538305473-830ba3ed-9509-44da-99a7-b83360a1c366.png",alt:"img"}})]),a._v(" "),r("h3",{attrs:{id:"_2-dockerfile-文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-dockerfile-文件"}},[a._v("#")]),a._v(" 2 Dockerfile 文件")]),a._v(" "),r("ul",[r("li",[a._v("如何可以生成 image 文件？如果你要推广自己的软件，势必要自己制作 image 文件。")]),a._v(" "),r("li",[a._v("这就需要用到 Dockerfile 文件。它是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);